
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000548  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000548  000005bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000062a  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000026f  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000231  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a8  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000210  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000021a  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  000015ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  7a:	0c 94 a2 02 	jmp	0x544	; 0x544 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
}


void LCD_cmd(unsigned char cmd)
{
	LCD_DATA=cmd;
  82:	82 bb       	out	0x12, r24	; 18
	ctrl =(0<<rs)|(0<<rw)|(1<<en);	// making RS and RW as LOW and EN as HIGH
  84:	80 e8       	ldi	r24, 0x80	; 128
  86:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f ec       	ldi	r24, 0xCF	; 207
  8a:	97 e0       	ldi	r25, 0x07	; 7
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	ctrl =(0<<rs)|(0<<rw)|(0<<en);	// making RS, RW , LOW and EN as LOW
  94:	15 ba       	out	0x15, r1	; 21
  96:	9f e7       	ldi	r25, 0x7F	; 127
  98:	28 e3       	ldi	r18, 0x38	; 56
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	91 50       	subi	r25, 0x01	; 1
  9e:	20 40       	sbci	r18, 0x00	; 0
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <LCD_cmd+0x1a>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_cmd+0x24>
  a6:	00 00       	nop
  a8:	08 95       	ret

000000aa <init_LCD>:
void LCD_write_string(char *str);


void init_LCD(void)
{
	LCD_cmd(0x38);		//initializtion of 16X2 LCD in 8bit mode
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  b0:	8f ec       	ldi	r24, 0xCF	; 207
  b2:	97 e0       	ldi	r25, 0x07	; 7
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <init_LCD+0xa>
  b8:	00 c0       	rjmp	.+0      	; 0xba <init_LCD+0x10>
  ba:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x01);		//clear LCD
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  c2:	8f ec       	ldi	r24, 0xCF	; 207
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <init_LCD+0x1c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <init_LCD+0x22>
  cc:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x0E);		//cursor ON
  ce:	8e e0       	ldi	r24, 0x0E	; 14
  d0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  d4:	8f ec       	ldi	r24, 0xCF	; 207
  d6:	97 e0       	ldi	r25, 0x07	; 7
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <init_LCD+0x2e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <init_LCD+0x34>
  de:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x80);		// ---8 go to first line and --0 is for 0th position
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  e6:	8f ec       	ldi	r24, 0xCF	; 207
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <init_LCD+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <init_LCD+0x46>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <LCD_write>:
	return;
}

void LCD_write(unsigned char data)
{
	LCD_DATA= data;
  f4:	82 bb       	out	0x12, r24	; 18
	ctrl = (1<<rs)|(0<<rw)|(1<<en);			// making RW as LOW and RS, EN as HIGH
  f6:	80 ea       	ldi	r24, 0xA0	; 160
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	8f ec       	ldi	r24, 0xCF	; 207
  fc:	97 e0       	ldi	r25, 0x07	; 7
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_write+0xa>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_write+0x10>
 104:	00 00       	nop
	_delay_ms(1);
	ctrl = (1<<rs)|(0<<rw)|(0<<en);		// making EN and RW as LOW and RS HIGH
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	85 bb       	out	0x15, r24	; 21
 10a:	9f e7       	ldi	r25, 0x7F	; 127
 10c:	28 e3       	ldi	r18, 0x38	; 56
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	91 50       	subi	r25, 0x01	; 1
 112:	20 40       	sbci	r18, 0x00	; 0
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <LCD_write+0x1c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_write+0x26>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <LCD_write_string>:
	_delay_ms(50);						// give a 10 milli second delay to get things executed
	return ;
}

void LCD_write_string(char *str)	//take address vaue of the string in pionter *str
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
	int i=0;
	while(str[i]!='\0')				// loop will go on till the NULL characters is soon in string
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	31 f0       	breq	.+12     	; 0x136 <LCD_write_string+0x18>
 12a:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_write(str[i]);				// sending data on CD byte by byte
 12c:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_write>
}

void LCD_write_string(char *str)	//take address vaue of the string in pionter *str
{
	int i=0;
	while(str[i]!='\0')				// loop will go on till the NULL characters is soon in string
 130:	89 91       	ld	r24, Y+
 132:	81 11       	cpse	r24, r1
 134:	fb cf       	rjmp	.-10     	; 0x12c <LCD_write_string+0xe>
	{
		LCD_write(str[i]);				// sending data on CD byte by byte
		i++;
	}
	return;
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <ADC_Init>:
#ifndef ADC_H_
#define ADC_H_

void ADC_Init()
{
	DDRA=0x00;			/* Make ADC port as input */
 13c:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;		/*Enable ADC, fr/128  */
 13e:	87 e8       	ldi	r24, 0x87	; 135
 140:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;		/*Vref: Avcc, ADC channel: 0 */
 142:	80 e4       	ldi	r24, 0x40	; 64
 144:	87 b9       	out	0x07, r24	; 7
 146:	08 95       	ret

00000148 <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);		/* set input channel to read */
 148:	97 b1       	in	r25, 0x07	; 7
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	98 2b       	or	r25, r24
 14e:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* start conversion */
 150:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/*monitor end of conversion interrupt flag */
 152:	34 9b       	sbis	0x06, 4	; 6
 154:	fe cf       	rjmp	.-4      	; 0x152 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8a e1       	ldi	r24, 0x1A	; 26
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <ADC_Read+0x10>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <ADC_Read+0x16>
	
	_delay_us(10);
	AinLow = (int)ADCL;				/*read lower byte*/
 15e:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;			/*read higher 2 bits, Multiply with weightage*/
 160:	85 b1       	in	r24, 0x05	; 5
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	98 2f       	mov	r25, r24
 166:	88 27       	eor	r24, r24
	Ain = Ain + AinLow;
	return(Ain);					/*return digital value*/
}
 168:	82 0f       	add	r24, r18
 16a:	91 1d       	adc	r25, r1
 16c:	08 95       	ret

0000016e <main>:
#include <stdlib.h>
#include "lcd.h"
#include "ADC.h"

int main()
{
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	00 d0       	rcall	.+0      	; 0x176 <main+0x8>
 176:	00 d0       	rcall	.+0      	; 0x178 <main+0xa>
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	char String[5];
	int value;
	DDRD=0xff;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	81 bb       	out	0x11, r24	; 17
	DDRC=0xE0;
 182:	80 ee       	ldi	r24, 0xE0	; 224
 184:	84 bb       	out	0x14, r24	; 20
	DDRB=0x03;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	87 bb       	out	0x17, r24	; 23
	ADC_Init();
 18a:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_Init>
	init_LCD();						/* initialization of LCD */
 18e:	0e 94 55 00 	call	0xaa	; 0xaa <init_LCD>
	LCD_write_string("Speed is:");		/* write string on 1st line of LCD */
 192:	80 e6       	ldi	r24, 0x60	; 96
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_write_string>

	while(1)
	{
		
		LCD_cmd(0xC0);						/* LCD16x2 cursor position */
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
		value=ADC_Read(0);					/* read ADC channel 0 */
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 a4 00 	call	0x148	; 0x148 <ADC_Read>
		//value=round(value*0.48876);
		value=round(value*0.0196);
 1a6:	bc 01       	movw	r22, r24
 1a8:	88 27       	eor	r24, r24
 1aa:	77 fd       	sbrc	r23, 7
 1ac:	80 95       	com	r24
 1ae:	98 2f       	mov	r25, r24
 1b0:	0e 94 35 01 	call	0x26a	; 0x26a <__floatsisf>
 1b4:	2e e2       	ldi	r18, 0x2E	; 46
 1b6:	30 e9       	ldi	r19, 0x90	; 144
 1b8:	40 ea       	ldi	r20, 0xA0	; 160
 1ba:	5c e3       	ldi	r21, 0x3C	; 60
 1bc:	0e 94 99 01 	call	0x332	; 0x332 <__mulsf3>
 1c0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <round>
 1c4:	0e 94 02 01 	call	0x204	; 0x204 <__fixsfsi>
 1c8:	16 2f       	mov	r17, r22
 1ca:	97 2f       	mov	r25, r23
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1cc:	4a e0       	ldi	r20, 0x0A	; 10
 1ce:	be 01       	movw	r22, r28
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	81 2f       	mov	r24, r17
 1d6:	0e 94 6d 02 	call	0x4da	; 0x4da <__itoa_ncheck>
		itoa(value,String,10);				/* int. to string conversion */
		PORTD=value;			
 1da:	12 bb       	out	0x12, r17	; 18
		LCD_write_string(String);
 1dc:	ce 01       	movw	r24, r28
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_write_string>
		LCD_write_string(" m/s");
 1e4:	8a e6       	ldi	r24, 0x6A	; 106
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_write_string>
		//if(value>=10)
		//{
			PINB|=(1<<PINB0);
 1ec:	b0 9a       	sbi	0x16, 0	; 22
		_delay_ms(100);
	}*/
	return 0;
}

 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	08 95       	ret

00000204 <__fixsfsi>:
 204:	04 d0       	rcall	.+8      	; 0x20e <__fixunssfsi>
 206:	68 94       	set
 208:	b1 11       	cpse	r27, r1
 20a:	8d c0       	rjmp	.+282    	; 0x326 <__fp_szero>
 20c:	08 95       	ret

0000020e <__fixunssfsi>:
 20e:	70 d0       	rcall	.+224    	; 0x2f0 <__fp_splitA>
 210:	88 f0       	brcs	.+34     	; 0x234 <__fixunssfsi+0x26>
 212:	9f 57       	subi	r25, 0x7F	; 127
 214:	90 f0       	brcs	.+36     	; 0x23a <__fixunssfsi+0x2c>
 216:	b9 2f       	mov	r27, r25
 218:	99 27       	eor	r25, r25
 21a:	b7 51       	subi	r27, 0x17	; 23
 21c:	a0 f0       	brcs	.+40     	; 0x246 <__fixunssfsi+0x38>
 21e:	d1 f0       	breq	.+52     	; 0x254 <__fixunssfsi+0x46>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	88 1f       	adc	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	1a f0       	brmi	.+6      	; 0x230 <__fixunssfsi+0x22>
 22a:	ba 95       	dec	r27
 22c:	c9 f7       	brne	.-14     	; 0x220 <__fixunssfsi+0x12>
 22e:	12 c0       	rjmp	.+36     	; 0x254 <__fixunssfsi+0x46>
 230:	b1 30       	cpi	r27, 0x01	; 1
 232:	81 f0       	breq	.+32     	; 0x254 <__fixunssfsi+0x46>
 234:	77 d0       	rcall	.+238    	; 0x324 <__fp_zero>
 236:	b1 e0       	ldi	r27, 0x01	; 1
 238:	08 95       	ret
 23a:	74 c0       	rjmp	.+232    	; 0x324 <__fp_zero>
 23c:	67 2f       	mov	r22, r23
 23e:	78 2f       	mov	r23, r24
 240:	88 27       	eor	r24, r24
 242:	b8 5f       	subi	r27, 0xF8	; 248
 244:	39 f0       	breq	.+14     	; 0x254 <__fixunssfsi+0x46>
 246:	b9 3f       	cpi	r27, 0xF9	; 249
 248:	cc f3       	brlt	.-14     	; 0x23c <__fixunssfsi+0x2e>
 24a:	86 95       	lsr	r24
 24c:	77 95       	ror	r23
 24e:	67 95       	ror	r22
 250:	b3 95       	inc	r27
 252:	d9 f7       	brne	.-10     	; 0x24a <__fixunssfsi+0x3c>
 254:	3e f4       	brtc	.+14     	; 0x264 <__fixunssfsi+0x56>
 256:	90 95       	com	r25
 258:	80 95       	com	r24
 25a:	70 95       	com	r23
 25c:	61 95       	neg	r22
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	8f 4f       	sbci	r24, 0xFF	; 255
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	08 95       	ret

00000266 <__floatunsisf>:
 266:	e8 94       	clt
 268:	09 c0       	rjmp	.+18     	; 0x27c <__floatsisf+0x12>

0000026a <__floatsisf>:
 26a:	97 fb       	bst	r25, 7
 26c:	3e f4       	brtc	.+14     	; 0x27c <__floatsisf+0x12>
 26e:	90 95       	com	r25
 270:	80 95       	com	r24
 272:	70 95       	com	r23
 274:	61 95       	neg	r22
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	8f 4f       	sbci	r24, 0xFF	; 255
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	99 23       	and	r25, r25
 27e:	a9 f0       	breq	.+42     	; 0x2aa <__floatsisf+0x40>
 280:	f9 2f       	mov	r31, r25
 282:	96 e9       	ldi	r25, 0x96	; 150
 284:	bb 27       	eor	r27, r27
 286:	93 95       	inc	r25
 288:	f6 95       	lsr	r31
 28a:	87 95       	ror	r24
 28c:	77 95       	ror	r23
 28e:	67 95       	ror	r22
 290:	b7 95       	ror	r27
 292:	f1 11       	cpse	r31, r1
 294:	f8 cf       	rjmp	.-16     	; 0x286 <__floatsisf+0x1c>
 296:	fa f4       	brpl	.+62     	; 0x2d6 <__floatsisf+0x6c>
 298:	bb 0f       	add	r27, r27
 29a:	11 f4       	brne	.+4      	; 0x2a0 <__floatsisf+0x36>
 29c:	60 ff       	sbrs	r22, 0
 29e:	1b c0       	rjmp	.+54     	; 0x2d6 <__floatsisf+0x6c>
 2a0:	6f 5f       	subi	r22, 0xFF	; 255
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255
 2a4:	8f 4f       	sbci	r24, 0xFF	; 255
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	16 c0       	rjmp	.+44     	; 0x2d6 <__floatsisf+0x6c>
 2aa:	88 23       	and	r24, r24
 2ac:	11 f0       	breq	.+4      	; 0x2b2 <__floatsisf+0x48>
 2ae:	96 e9       	ldi	r25, 0x96	; 150
 2b0:	11 c0       	rjmp	.+34     	; 0x2d4 <__floatsisf+0x6a>
 2b2:	77 23       	and	r23, r23
 2b4:	21 f0       	breq	.+8      	; 0x2be <__floatsisf+0x54>
 2b6:	9e e8       	ldi	r25, 0x8E	; 142
 2b8:	87 2f       	mov	r24, r23
 2ba:	76 2f       	mov	r23, r22
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <__floatsisf+0x5e>
 2be:	66 23       	and	r22, r22
 2c0:	71 f0       	breq	.+28     	; 0x2de <__floatsisf+0x74>
 2c2:	96 e8       	ldi	r25, 0x86	; 134
 2c4:	86 2f       	mov	r24, r22
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	2a f0       	brmi	.+10     	; 0x2d6 <__floatsisf+0x6c>
 2cc:	9a 95       	dec	r25
 2ce:	66 0f       	add	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	88 1f       	adc	r24, r24
 2d4:	da f7       	brpl	.-10     	; 0x2cc <__floatsisf+0x62>
 2d6:	88 0f       	add	r24, r24
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	97 f9       	bld	r25, 7
 2de:	08 95       	ret

000002e0 <__fp_split3>:
 2e0:	57 fd       	sbrc	r21, 7
 2e2:	90 58       	subi	r25, 0x80	; 128
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	59 f0       	breq	.+22     	; 0x300 <__fp_splitA+0x10>
 2ea:	5f 3f       	cpi	r21, 0xFF	; 255
 2ec:	71 f0       	breq	.+28     	; 0x30a <__fp_splitA+0x1a>
 2ee:	47 95       	ror	r20

000002f0 <__fp_splitA>:
 2f0:	88 0f       	add	r24, r24
 2f2:	97 fb       	bst	r25, 7
 2f4:	99 1f       	adc	r25, r25
 2f6:	61 f0       	breq	.+24     	; 0x310 <__fp_splitA+0x20>
 2f8:	9f 3f       	cpi	r25, 0xFF	; 255
 2fa:	79 f0       	breq	.+30     	; 0x31a <__fp_splitA+0x2a>
 2fc:	87 95       	ror	r24
 2fe:	08 95       	ret
 300:	12 16       	cp	r1, r18
 302:	13 06       	cpc	r1, r19
 304:	14 06       	cpc	r1, r20
 306:	55 1f       	adc	r21, r21
 308:	f2 cf       	rjmp	.-28     	; 0x2ee <__fp_split3+0xe>
 30a:	46 95       	lsr	r20
 30c:	f1 df       	rcall	.-30     	; 0x2f0 <__fp_splitA>
 30e:	08 c0       	rjmp	.+16     	; 0x320 <__fp_splitA+0x30>
 310:	16 16       	cp	r1, r22
 312:	17 06       	cpc	r1, r23
 314:	18 06       	cpc	r1, r24
 316:	99 1f       	adc	r25, r25
 318:	f1 cf       	rjmp	.-30     	; 0x2fc <__fp_splitA+0xc>
 31a:	86 95       	lsr	r24
 31c:	71 05       	cpc	r23, r1
 31e:	61 05       	cpc	r22, r1
 320:	08 94       	sec
 322:	08 95       	ret

00000324 <__fp_zero>:
 324:	e8 94       	clt

00000326 <__fp_szero>:
 326:	bb 27       	eor	r27, r27
 328:	66 27       	eor	r22, r22
 32a:	77 27       	eor	r23, r23
 32c:	cb 01       	movw	r24, r22
 32e:	97 f9       	bld	r25, 7
 330:	08 95       	ret

00000332 <__mulsf3>:
 332:	0b d0       	rcall	.+22     	; 0x34a <__mulsf3x>
 334:	c1 c0       	rjmp	.+386    	; 0x4b8 <__fp_round>
 336:	b2 d0       	rcall	.+356    	; 0x49c <__fp_pscA>
 338:	28 f0       	brcs	.+10     	; 0x344 <__mulsf3+0x12>
 33a:	b7 d0       	rcall	.+366    	; 0x4aa <__fp_pscB>
 33c:	18 f0       	brcs	.+6      	; 0x344 <__mulsf3+0x12>
 33e:	95 23       	and	r25, r21
 340:	09 f0       	breq	.+2      	; 0x344 <__mulsf3+0x12>
 342:	7a c0       	rjmp	.+244    	; 0x438 <__fp_inf>
 344:	a8 c0       	rjmp	.+336    	; 0x496 <__fp_nan>
 346:	11 24       	eor	r1, r1
 348:	ee cf       	rjmp	.-36     	; 0x326 <__fp_szero>

0000034a <__mulsf3x>:
 34a:	ca df       	rcall	.-108    	; 0x2e0 <__fp_split3>
 34c:	a0 f3       	brcs	.-24     	; 0x336 <__mulsf3+0x4>

0000034e <__mulsf3_pse>:
 34e:	95 9f       	mul	r25, r21
 350:	d1 f3       	breq	.-12     	; 0x346 <__mulsf3+0x14>
 352:	95 0f       	add	r25, r21
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	55 1f       	adc	r21, r21
 358:	62 9f       	mul	r22, r18
 35a:	f0 01       	movw	r30, r0
 35c:	72 9f       	mul	r23, r18
 35e:	bb 27       	eor	r27, r27
 360:	f0 0d       	add	r31, r0
 362:	b1 1d       	adc	r27, r1
 364:	63 9f       	mul	r22, r19
 366:	aa 27       	eor	r26, r26
 368:	f0 0d       	add	r31, r0
 36a:	b1 1d       	adc	r27, r1
 36c:	aa 1f       	adc	r26, r26
 36e:	64 9f       	mul	r22, r20
 370:	66 27       	eor	r22, r22
 372:	b0 0d       	add	r27, r0
 374:	a1 1d       	adc	r26, r1
 376:	66 1f       	adc	r22, r22
 378:	82 9f       	mul	r24, r18
 37a:	22 27       	eor	r18, r18
 37c:	b0 0d       	add	r27, r0
 37e:	a1 1d       	adc	r26, r1
 380:	62 1f       	adc	r22, r18
 382:	73 9f       	mul	r23, r19
 384:	b0 0d       	add	r27, r0
 386:	a1 1d       	adc	r26, r1
 388:	62 1f       	adc	r22, r18
 38a:	83 9f       	mul	r24, r19
 38c:	a0 0d       	add	r26, r0
 38e:	61 1d       	adc	r22, r1
 390:	22 1f       	adc	r18, r18
 392:	74 9f       	mul	r23, r20
 394:	33 27       	eor	r19, r19
 396:	a0 0d       	add	r26, r0
 398:	61 1d       	adc	r22, r1
 39a:	23 1f       	adc	r18, r19
 39c:	84 9f       	mul	r24, r20
 39e:	60 0d       	add	r22, r0
 3a0:	21 1d       	adc	r18, r1
 3a2:	82 2f       	mov	r24, r18
 3a4:	76 2f       	mov	r23, r22
 3a6:	6a 2f       	mov	r22, r26
 3a8:	11 24       	eor	r1, r1
 3aa:	9f 57       	subi	r25, 0x7F	; 127
 3ac:	50 40       	sbci	r21, 0x00	; 0
 3ae:	8a f0       	brmi	.+34     	; 0x3d2 <__mulsf3_pse+0x84>
 3b0:	e1 f0       	breq	.+56     	; 0x3ea <__mulsf3_pse+0x9c>
 3b2:	88 23       	and	r24, r24
 3b4:	4a f0       	brmi	.+18     	; 0x3c8 <__mulsf3_pse+0x7a>
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	bb 1f       	adc	r27, r27
 3bc:	66 1f       	adc	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	88 1f       	adc	r24, r24
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	50 40       	sbci	r21, 0x00	; 0
 3c6:	a9 f7       	brne	.-22     	; 0x3b2 <__mulsf3_pse+0x64>
 3c8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ca:	51 05       	cpc	r21, r1
 3cc:	70 f0       	brcs	.+28     	; 0x3ea <__mulsf3_pse+0x9c>
 3ce:	34 c0       	rjmp	.+104    	; 0x438 <__fp_inf>
 3d0:	aa cf       	rjmp	.-172    	; 0x326 <__fp_szero>
 3d2:	5f 3f       	cpi	r21, 0xFF	; 255
 3d4:	ec f3       	brlt	.-6      	; 0x3d0 <__mulsf3_pse+0x82>
 3d6:	98 3e       	cpi	r25, 0xE8	; 232
 3d8:	dc f3       	brlt	.-10     	; 0x3d0 <__mulsf3_pse+0x82>
 3da:	86 95       	lsr	r24
 3dc:	77 95       	ror	r23
 3de:	67 95       	ror	r22
 3e0:	b7 95       	ror	r27
 3e2:	f7 95       	ror	r31
 3e4:	e7 95       	ror	r30
 3e6:	9f 5f       	subi	r25, 0xFF	; 255
 3e8:	c1 f7       	brne	.-16     	; 0x3da <__mulsf3_pse+0x8c>
 3ea:	fe 2b       	or	r31, r30
 3ec:	88 0f       	add	r24, r24
 3ee:	91 1d       	adc	r25, r1
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	97 f9       	bld	r25, 7
 3f6:	08 95       	ret

000003f8 <round>:
 3f8:	7b df       	rcall	.-266    	; 0x2f0 <__fp_splitA>
 3fa:	e0 f0       	brcs	.+56     	; 0x434 <round+0x3c>
 3fc:	9e 37       	cpi	r25, 0x7E	; 126
 3fe:	d8 f0       	brcs	.+54     	; 0x436 <round+0x3e>
 400:	96 39       	cpi	r25, 0x96	; 150
 402:	b8 f4       	brcc	.+46     	; 0x432 <round+0x3a>
 404:	9e 38       	cpi	r25, 0x8E	; 142
 406:	48 f4       	brcc	.+18     	; 0x41a <round+0x22>
 408:	67 2f       	mov	r22, r23
 40a:	78 2f       	mov	r23, r24
 40c:	88 27       	eor	r24, r24
 40e:	98 5f       	subi	r25, 0xF8	; 248
 410:	f9 cf       	rjmp	.-14     	; 0x404 <round+0xc>
 412:	86 95       	lsr	r24
 414:	77 95       	ror	r23
 416:	67 95       	ror	r22
 418:	93 95       	inc	r25
 41a:	95 39       	cpi	r25, 0x95	; 149
 41c:	d0 f3       	brcs	.-12     	; 0x412 <round+0x1a>
 41e:	b6 2f       	mov	r27, r22
 420:	b1 70       	andi	r27, 0x01	; 1
 422:	6b 0f       	add	r22, r27
 424:	71 1d       	adc	r23, r1
 426:	81 1d       	adc	r24, r1
 428:	20 f4       	brcc	.+8      	; 0x432 <round+0x3a>
 42a:	87 95       	ror	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	93 95       	inc	r25
 432:	08 c0       	rjmp	.+16     	; 0x444 <__fp_mintl>
 434:	22 c0       	rjmp	.+68     	; 0x47a <__fp_mpack>
 436:	77 cf       	rjmp	.-274    	; 0x326 <__fp_szero>

00000438 <__fp_inf>:
 438:	97 f9       	bld	r25, 7
 43a:	9f 67       	ori	r25, 0x7F	; 127
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	08 95       	ret

00000444 <__fp_mintl>:
 444:	88 23       	and	r24, r24
 446:	71 f4       	brne	.+28     	; 0x464 <__stack+0x5>
 448:	77 23       	and	r23, r23
 44a:	21 f0       	breq	.+8      	; 0x454 <__fp_mintl+0x10>
 44c:	98 50       	subi	r25, 0x08	; 8
 44e:	87 2b       	or	r24, r23
 450:	76 2f       	mov	r23, r22
 452:	07 c0       	rjmp	.+14     	; 0x462 <__stack+0x3>
 454:	66 23       	and	r22, r22
 456:	11 f4       	brne	.+4      	; 0x45c <__fp_mintl+0x18>
 458:	99 27       	eor	r25, r25
 45a:	0d c0       	rjmp	.+26     	; 0x476 <__stack+0x17>
 45c:	90 51       	subi	r25, 0x10	; 16
 45e:	86 2b       	or	r24, r22
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	2a f0       	brmi	.+10     	; 0x470 <__stack+0x11>
 466:	9a 95       	dec	r25
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	da f7       	brpl	.-10     	; 0x466 <__stack+0x7>
 470:	88 0f       	add	r24, r24
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret

0000047a <__fp_mpack>:
 47a:	9f 3f       	cpi	r25, 0xFF	; 255
 47c:	31 f0       	breq	.+12     	; 0x48a <__fp_mpack_finite+0xc>

0000047e <__fp_mpack_finite>:
 47e:	91 50       	subi	r25, 0x01	; 1
 480:	20 f4       	brcc	.+8      	; 0x48a <__fp_mpack_finite+0xc>
 482:	87 95       	ror	r24
 484:	77 95       	ror	r23
 486:	67 95       	ror	r22
 488:	b7 95       	ror	r27
 48a:	88 0f       	add	r24, r24
 48c:	91 1d       	adc	r25, r1
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	97 f9       	bld	r25, 7
 494:	08 95       	ret

00000496 <__fp_nan>:
 496:	9f ef       	ldi	r25, 0xFF	; 255
 498:	80 ec       	ldi	r24, 0xC0	; 192
 49a:	08 95       	ret

0000049c <__fp_pscA>:
 49c:	00 24       	eor	r0, r0
 49e:	0a 94       	dec	r0
 4a0:	16 16       	cp	r1, r22
 4a2:	17 06       	cpc	r1, r23
 4a4:	18 06       	cpc	r1, r24
 4a6:	09 06       	cpc	r0, r25
 4a8:	08 95       	ret

000004aa <__fp_pscB>:
 4aa:	00 24       	eor	r0, r0
 4ac:	0a 94       	dec	r0
 4ae:	12 16       	cp	r1, r18
 4b0:	13 06       	cpc	r1, r19
 4b2:	14 06       	cpc	r1, r20
 4b4:	05 06       	cpc	r0, r21
 4b6:	08 95       	ret

000004b8 <__fp_round>:
 4b8:	09 2e       	mov	r0, r25
 4ba:	03 94       	inc	r0
 4bc:	00 0c       	add	r0, r0
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__fp_round+0xc>
 4c0:	88 23       	and	r24, r24
 4c2:	52 f0       	brmi	.+20     	; 0x4d8 <__fp_round+0x20>
 4c4:	bb 0f       	add	r27, r27
 4c6:	40 f4       	brcc	.+16     	; 0x4d8 <__fp_round+0x20>
 4c8:	bf 2b       	or	r27, r31
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__fp_round+0x18>
 4cc:	60 ff       	sbrs	r22, 0
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__fp_round+0x20>
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	08 95       	ret

000004da <__itoa_ncheck>:
 4da:	bb 27       	eor	r27, r27
 4dc:	4a 30       	cpi	r20, 0x0A	; 10
 4de:	31 f4       	brne	.+12     	; 0x4ec <__itoa_ncheck+0x12>
 4e0:	99 23       	and	r25, r25
 4e2:	22 f4       	brpl	.+8      	; 0x4ec <__itoa_ncheck+0x12>
 4e4:	bd e2       	ldi	r27, 0x2D	; 45
 4e6:	90 95       	com	r25
 4e8:	81 95       	neg	r24
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__utoa_common>

000004f0 <__utoa_ncheck>:
 4f0:	bb 27       	eor	r27, r27

000004f2 <__utoa_common>:
 4f2:	fb 01       	movw	r30, r22
 4f4:	55 27       	eor	r21, r21
 4f6:	aa 27       	eor	r26, r26
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	aa 1f       	adc	r26, r26
 4fe:	a4 17       	cp	r26, r20
 500:	10 f0       	brcs	.+4      	; 0x506 <__utoa_common+0x14>
 502:	a4 1b       	sub	r26, r20
 504:	83 95       	inc	r24
 506:	50 51       	subi	r21, 0x10	; 16
 508:	b9 f7       	brne	.-18     	; 0x4f8 <__utoa_common+0x6>
 50a:	a0 5d       	subi	r26, 0xD0	; 208
 50c:	aa 33       	cpi	r26, 0x3A	; 58
 50e:	08 f0       	brcs	.+2      	; 0x512 <__utoa_common+0x20>
 510:	a9 5d       	subi	r26, 0xD9	; 217
 512:	a1 93       	st	Z+, r26
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	79 f7       	brne	.-34     	; 0x4f6 <__utoa_common+0x4>
 518:	b1 11       	cpse	r27, r1
 51a:	b1 93       	st	Z+, r27
 51c:	11 92       	st	Z+, r1
 51e:	cb 01       	movw	r24, r22
 520:	0c 94 92 02 	jmp	0x524	; 0x524 <strrev>

00000524 <strrev>:
 524:	dc 01       	movw	r26, r24
 526:	fc 01       	movw	r30, r24
 528:	67 2f       	mov	r22, r23
 52a:	71 91       	ld	r23, Z+
 52c:	77 23       	and	r23, r23
 52e:	e1 f7       	brne	.-8      	; 0x528 <strrev+0x4>
 530:	32 97       	sbiw	r30, 0x02	; 2
 532:	04 c0       	rjmp	.+8      	; 0x53c <strrev+0x18>
 534:	7c 91       	ld	r23, X
 536:	6d 93       	st	X+, r22
 538:	70 83       	st	Z, r23
 53a:	62 91       	ld	r22, -Z
 53c:	ae 17       	cp	r26, r30
 53e:	bf 07       	cpc	r27, r31
 540:	c8 f3       	brcs	.-14     	; 0x534 <strrev+0x10>
 542:	08 95       	ret

00000544 <_exit>:
 544:	f8 94       	cli

00000546 <__stop_program>:
 546:	ff cf       	rjmp	.-2      	; 0x546 <__stop_program>
