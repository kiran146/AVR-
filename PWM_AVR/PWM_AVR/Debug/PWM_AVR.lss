
PWM_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000087  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000053  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bc  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000122  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define get_bit(reg,bitnum) ((reg & (1<<bitnum))>>bitnum)

int main(void)
{
	DDRD=0xf8; // set the first 3 pins of PORTD to be inputs to read from the push buttons    DDRB=0xff; //  Pin3 in POrt B is output as this is the OC0 pin that will produce the PWM.
  6c:	88 ef       	ldi	r24, 0xF8	; 248
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00; // Initialize PORTD to zeros
  70:	12 ba       	out	0x12, r1	; 18
	TCCR0=0x75; //Configure TCCR0 value 75 to mantain70% duty cycle
  72:	85 e7       	ldi	r24, 0x75	; 117
  74:	83 bf       	out	0x33, r24	; 51
	TIMSK=0x00;
  76:	19 be       	out	0x39, r1	; 57
	OCR0=255; // Set OCR0 to 255 so that the duty cycle is initially 0 and the motor is not rotating
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	8c bf       	out	0x3c, r24	; 60

	while(1)
	{
		if (get_bit(PIND,0)==1)
		{
			OCR0=178; //If button 1 is pressed, set OCR0=178 (duty cycle=10%).
  7c:	82 eb       	ldi	r24, 0xB2	; 178
		}
		if (get_bit(PIND,1)==1)
		{
			OCR0=102; //If button 2 is pressed, set OCR0=102 (duty cycle=60%).
  7e:	96 e6       	ldi	r25, 0x66	; 102
		}
		if (get_bit(PIND,2)==1)
		{
			OCR0=25; //If button 3 is pressed, set OCR0=25 (duty cycle=90%).
  80:	29 e1       	ldi	r18, 0x19	; 25
	TIMSK=0x00;
	OCR0=255; // Set OCR0 to 255 so that the duty cycle is initially 0 and the motor is not rotating

	while(1)
	{
		if (get_bit(PIND,0)==1)
  82:	80 99       	sbic	0x10, 0	; 16
		{
			OCR0=178; //If button 1 is pressed, set OCR0=178 (duty cycle=10%).
  84:	8c bf       	out	0x3c, r24	; 60
		}
		if (get_bit(PIND,1)==1)
  86:	81 99       	sbic	0x10, 1	; 16
		{
			OCR0=102; //If button 2 is pressed, set OCR0=102 (duty cycle=60%).
  88:	9c bf       	out	0x3c, r25	; 60
		}
		if (get_bit(PIND,2)==1)
  8a:	82 9b       	sbis	0x10, 2	; 16
  8c:	fa cf       	rjmp	.-12     	; 0x82 <main+0x16>
		{
			OCR0=25; //If button 3 is pressed, set OCR0=25 (duty cycle=90%).
  8e:	2c bf       	out	0x3c, r18	; 60
  90:	f8 cf       	rjmp	.-16     	; 0x82 <main+0x16>

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
